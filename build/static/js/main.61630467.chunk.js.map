{"version":3,"sources":["components/O/O.js","components/Re/Re.js","components/Oreo/Oreo.js","App.js","serviceWorker.js","index.js"],"names":["O","style","zIndex","this","props","load","bottom","react_default","a","createElement","className","Component","Re","Oreo","state","oreo","height","onInputChangeHandler","event","target","value","slice","_this","setState","concat","components_O_O","toString","components_Re_Re","last_Chara","map","item","i","Fragment","key","onChange","App","components_Oreo_Oreo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAkBeA,gMAZX,IAAIC,EAAQ,CACVC,OAAQ,IAAMC,KAAKC,MAAMC,KACzBC,OAA0B,GAAlBH,KAAKC,MAAMC,MAErB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IAAIT,MAAOA,GAAOM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iBARzBC,cCcDC,0LAZX,IAAIX,EAAQ,CACVC,OAAQ,IAAMC,KAAKC,MAAMC,KACzBC,OAA0B,GAAlBH,KAAKC,MAAMC,MAErB,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKT,MAAOA,GAAOM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBARxCC,cCkDFE,6MA9CbC,MAAQ,CACNT,KAAM,EACNU,KAAM,GACNC,OAAO,KAGTC,qBAAuB,SAACC,GACgB,WAAjCA,EAAMC,OAAOC,MAAMC,OAAO,KAC7BC,EAAKC,SAAS,CACZR,KAAMO,EAAKR,MAAMC,KAAKS,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,CAAGf,UAAU,IAAIL,KAAMiB,EAAKR,MAAMT,KAAKqB,gBAEtEJ,EAAKC,SAAS,CACZlB,KAAMiB,EAAKR,MAAMT,KAAO,KAGU,WAAjCa,EAAMC,OAAOC,MAAMC,OAAO,KAC7BC,EAAKC,SAAS,CACZR,KAAMO,EAAKR,MAAMC,KAAKS,OAAOjB,EAAAC,EAAAC,cAACkB,EAAD,CAAIjB,UAAU,KAAKL,KAAMiB,EAAKR,MAAMT,KAAKqB,gBAExEJ,EAAKC,SAAS,CACZlB,KAAMiB,EAAKR,MAAMT,KAAO,KAG5B,IAAIuB,EAAaV,EAAMC,OAAOC,MAAMC,OAAO,GACxB,WAAbO,GAAiC,WAAbA,GAAiC,WAAbA,IAC5CV,EAAMC,OAAOC,MAAQ,6EAIvB,OACIb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXP,KAAKW,MAAMC,KAAKc,IAAI,SAACC,EAAMC,GAAP,OAClBxB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,SAAP,CAAgBC,IAAKF,GAAGxB,EAAAC,EAAAC,cAAA,WAAMqB,QAItCvB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WAAWwB,SAAU/B,KAAKc,uBAC3CV,EAAAC,EAAAC,cAAA,0BAzCWE,aCQJwB,mLARX,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2B,EAAD,cAJUzB,aCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.61630467.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './O.css'\n\nclass O extends Component{\n  render(){\n    var style = {\n      zIndex: \"-\" + this.props.load,\n      bottom: this.props.load * 70\n    }\n    return(\n      <div>\n        <div className=\"O\" style={style}><div className=\"pattern\">OREO</div></div>\n      </div>\n    );\n  }\n}\n\nexport default O;","import React, {Component} from 'react';\n\nimport './Re.css'\n\nclass Re extends Component{\n  render(){\n    var style = {\n      zIndex: \"-\" + this.props.load,\n      bottom: this.props.load * 70\n    }\n    return(\n      <div>\n        <div className=\"Re\" style={style}><div className=\"shadow\"></div></div>\n      </div>\n    );\n  }\n}\n\nexport default Re;","import React, {Component} from 'react';\n\nimport './Oreo.css'\n\nimport O from '../O/O';\nimport Re from '../Re/Re';\n\nclass Oreo extends Component{\n  state = {\n    load: 0,\n    oreo: [],\n    height:0\n  }\n  \n  onInputChangeHandler = (event) => {\n    if ( event.target.value.slice(-1) === \"オ\" ) {\n      this.setState({\n        oreo: this.state.oreo.concat(<O className=\"o\" load={this.state.load.toString()} />)\n      });\n      this.setState({\n        load: this.state.load + 1\n      });\n    }\n    if ( event.target.value.slice(-1) === \"レ\" ) {\n      this.setState({\n        oreo: this.state.oreo.concat(<Re className=\"re\" load={this.state.load.toString()} />)\n      });\n      this.setState({\n        load: this.state.load + 1\n      });\n    }\n    var last_Chara = event.target.value.slice(-1);\n    if ( (last_Chara!==\"お\")&&(last_Chara!==\"れ\")&&(last_Chara!==\"ｒ\") ) {\n      event.target.value = \"\";\n    }\n   }\n  render(){\n    return(\n        <div>\n          <div className=\"title\">OREO:maker</div>\n          <div className=\"oreo\">\n          <div className=\"sweets\">\n            { this.state.oreo.map((item, i) => \n                <React.Fragment key={i}><div>{item}</div></React.Fragment>) \n            }\n          </div>\n          </div>\n        <input className=\"oreoForm\" onChange={this.onInputChangeHandler} />\n        <h4>v0.1</h4>\n      </div>\n    );\n  }\n}\n\nexport default Oreo;","import React, { Component } from 'react';\n//import O from './components/O/O';\n//import Re from './components/Re/Re';\nimport Oreo from './components/Oreo/Oreo';\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Oreo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}